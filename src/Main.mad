import type { DateTime } from "Date"
import type { Wish } from "Wish"

import { Wish } from "Wish"



type Connection = Connection
export type Connection

export type Error = BadConnection(String) | BadQuery(String) | UnknownError


export type Value
  = BooleanValue(Boolean)
  | DateValue(DateTime)
  | Float4Value(Float)
  | Float8Value(Float)
  | Int2Value(Short)
  | Int4Value(Short)
  | Int8Value(Integer)
  | Json(String)
  | JsonB(String)
  | Money(Integer, Integer)
  | Text(String)
  | Timestamp(DateTime)
  | TimestampTz(DateTime)
  | VarCharValue(String)
  | NotImplemented

export alias Row = List Value
export alias QueryResult = List Row


connectFFI :: String -> (Integer -> String -> {}) -> (Connection -> {}) -> {}
connectFFI = extern "madpostgres__connect"


disconnect :: Connection -> {}
export disconnect = extern "madpostgres__disconnect"

// disconnect :: Connection -> Wish Error {}
// export disconnect = (connection) => Wish((_, good) => {
//   disconnectFFI(connection)
//   good({})
// })

queryFFI :: Connection -> String -> (Integer -> String -> {}) -> (QueryResult -> {}) -> {}
queryFFI = extern "madpostgres__query"


connect :: String -> Wish Error Connection
export connect = (connectionString) => Wish(
  (bad, good) => {
    connectFFI(
      connectionString,
      (code, message) => where(code) {
        1 =>
          bad(BadConnection(message))

        _ =>
          bad(UnknownError)
      },
      good,
    )

    // TODO: handle canceling
    return () => {}
  }
)

// TODO: we should probably invert the params
query :: Connection -> String -> Wish Error QueryResult
export query = (connection, q) => Wish(
  (bad, good) => {
    queryFFI(
      connection,
      q,
      (code, message) => where(code) {
        1 =>
          bad(BadConnection(message))

        2 =>
          bad(BadQuery(message))

        _ =>
          bad(UnknownError)
      },
      good
    )

    // TODO: handle canceling
    return () => {}
  }
)
